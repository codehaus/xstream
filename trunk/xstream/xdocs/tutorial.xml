<?xml version="1.0"?>
<document>

	<properties>
		<title>Two minute tutorial</title>
		<author email="joe@thoughtworks.net">Joe Walnes</author>
	</properties>

	<body>

		<section name="Two minute tutorial">
			<p>This is a very quick introduction to XStream. 
			Skim read it to get an idea of how simple it is to convert objects to XML and back again.
            I'm sure you'll have questions afterwards.</p>
        </section>
		
		<section name="Create classes to be serialized">
			<p>Here's a couple of simple classes. 
            XStream can convert instances of these to XML and back again.</p>

<source>public class Person {
  private String firstname;
  private String lastname;
  private PhoneNumber phone;
  private PhoneNumber fax;
  // ... constructors and methods
}

public class PhoneNumber {
  private int code;
  private String number;
  // ... constructors and methods
}</source>
			<p><b>Note:</b> Notice that the fields are private. XStream doesn't care about the
			visibility of the fields. No getters or setters are needed. Also, XStream
			does not limit you to having a default constructor.</p>
		</section>
		
		<section name="Initializing XStream">

			<p>To use XStream, simply instantiate an XStream class:</p>
			<source>XStream xstream = new XStream();</source>

			<p><b>Note:</b> This class is a simple facade designed for common operations. For more flexibility you
            may choose to create your own facade that behaves differently.</p>

			<p>Now, to make the XML outputted by XStream more concise, you can create aliases for your custom class names
            to XML element names. This is the <b>only</b> type of mapping required to use XStream and even this is optional.</p>

<source>xstream.alias("person", Person.class);
xstream.alias("phonenumber", PhoneNumber.class);</source>

			<p><b>Note:</b> This is an optional step. Without it XStream would work fine, but the XML element names would contain the
            fully qualified name of each class (including package) which would bulk up the XML a bit.</p>

		</section>

		<section name="Serializing an object to XML">

			<p>Let's create an instance of Person and populate its fields:</p>
			
<source>Person joe = new Person("Joe", "Walnes");
joe.setPhone(new PhoneNumber(123, "1234-456");
joe.setFax(new PhoneNumber(123, "9999-999");</source>

			<p>Now, to convert it to XML, all you have to do is make a simple call to XStream:</p>
<source>String xml = xstream.toXML(joe);</source>

			<p>The resulting XML looks like this:</p>
			
<source>&lt;person&gt;
  &lt;firstname&gt;Joe&lt;/firstname&gt;
  &lt;lastname&gt;Walnes&lt;/lastname&gt;
  &lt;phone&gt;
    &lt;code&gt;123&lt;/code&gt;
    &lt;number&gt;1234-456&lt;/number&gt;
  &lt;/phone&gt;
  &lt;fax&gt;
    &lt;code&gt;123&lt;/code&gt;
    &lt;number&gt;9999-999&lt;/number&gt;
  &lt;/fax&gt;
&lt;/person></source>
			<p>It's that simple. Look at how clean the XML is too.</p>
		</section>
		<section name="Deserializing an object back from XML">
			<p>To reconstruct an object, purely from the XML:</p>
			
<source>Person newJoe = (Person)xstream.fromXML(xml);</source>
			<p>And that's how simple XStream is!</p>
		</section>

		<section name="Summary">
			<p>To recap:</p>
			<ul>
				<li>Create element name to class name aliases for any custom classes using <nobr><code>xstream.alias(String elementName, Class cls);</code></nobr></li>
				<li>Convert an object to XML using <nobr><code>xstream.toXML(Object obj);</code></nobr></li>
				<li>Convert XML back to an object using <nobr><code>xstream.fromXML(String xml);</code></nobr></li>
			</ul>
		</section>
	</body>

</document>
