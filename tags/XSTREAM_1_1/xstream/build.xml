<project name="xstream" default="library">

    <property file="build.properties"/>
    <property name="version" value="SNAPSHOT"/>

    <path id="classpath">
        <fileset dir="lib"/>
        <pathelement path="${java.build.dir}"/>
        <pathelement path="${test.build.dir}"/>
    </path>

    <target name="library" depends="clean, compile, test, jar" description="Build and test library only"/>

    <target name="all" depends="library, javadoc, website, dist" description="Rebuild everything"/>

    <target name="clean" description="Clean up all built files">
        <delete dir="build"/>
    </target>

    <target name="compile" description="Compile all Java">
        <mkdir dir="${java.build.dir}"/>
        <javac srcdir="${java.src.dir}" destdir="${java.build.dir}" debug="${java.compile.debug}">
            <classpath refid="classpath"/>
        </javac>
    </target>

    <target name="test" depends="test:reports"/>

    <target name="test:reports" depends="test:all">
        <junitreport todir="${test.reports.dir}">
            <fileset dir="${test.reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.reports.dir}/html"/>
        </junitreport>
    </target>

    <target name="test:all" depends="test:compile" description="Run all acceptance tests and unit tests">
        <mkdir dir="${test.reports.dir}"/>
        <junit printsummary="${junit.printsummary}" haltonfailure="${junit.haltonfailure}">
            <classpath refid="classpath"/>
            <formatter type="xml"/>
            <formatter type="${junit.formatter}"/>
            <batchtest todir="${test.reports.dir}">
                <fileset dir="${test.src.dir}">
                    <include name="${test.src.includes}"/>
                    <exclude name="${test.src.excludes}"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test:single" depends="test:compile" description="Run a single test (specified by property 'testcase')">
        <echo message="testcase: ${testcase}"/>
        <mkdir dir="${test.reports.dir}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}"
            haltonfailure="${junit.haltonfailure}">
            <jvmarg line="${junit.jvmarg}"/>
            <formatter type="${junit.formatter}"/>
            <test name="${testcase}" todir="${test.reports.dir}"/>
        </junit>
    </target>

    <target name="test:compile" depends="compile, test:resources" description="Compile test src">
        <mkdir dir="${test.build.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${test.build.dir}">
            <classpath refid="classpath"/>
        </javac>
    </target>

    <target name="test:resources">
        <!-- Copies test resources -->
        <copy todir="${test.build.dir}" overwrite="yes">
            <fileset dir="${java.src.dir}">
                <include name="**/*"/>
                <exclude name="**/*.java"/>
            </fileset>
            <fileset dir="${test.src.dir}">
                <include name="**/*"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="jar" depends="compile" description="Build JARs">
        <jar jarfile="build/xstream-${version}.jar">
            <fileset dir="${java.build.dir}"/>
        </jar>
        <echo message="--- Created JAR ---"/>
        <echo message="build/xstream-${version}.jar"/>
        <echo message="--------------------"/>
    </target>

    <target name="javadoc" description="Build JavaDoc">
        <mkdir dir="build/website/javadoc"/>
        <javadoc destdir="build/website/javadoc" author="true" version="true" use="true" windowtitle="XStream ${version} API">
            <classpath refid="classpath"/>
            <packageset dir="${java.src.dir}" defaultexcludes="yes">
                <exclude name="com/thoughtworks/xstream/core/**"/>
                <exclude name="com/thoughtworks/xstream/io/path/**"/>
                <exclude name="com/thoughtworks/xstream/io/xml/xppdom/**"/>
            </packageset>
            <doctitle><![CDATA[<h1>XStream ${version} API</h1>]]></doctitle>
            <bottom><![CDATA[<i>Joe Walnes, <a href="http://xstream.codehaus.org">http://xstream.codehaus.org/</a></i>]]></bottom>
        </javadoc>
    </target>

    <target name="website" description="Build website">
        <mkdir dir="build/website-classes"/>
        <javac srcdir="website/java" destdir="build/website-classes">
            <classpath>
                <fileset dir="website/lib"/>
            </classpath>
        </javac>
        <mkdir dir="build/website"/>
        <java classname="minimesh.Main">
            <classpath>
                <fileset dir="website/lib"/>
                <pathelement path="build/website-classes"/>
            </classpath>
            <arg value="website/content/website.xml"/>
            <arg value="website/templates/skin.html"/>
            <arg value="build/website"/>
        </java>
    </target>

    <target name="dist" depends="jar,website" description="Build distribution package">
        <zip zipfile="build/xstream-${version}.zip">
            <zipfileset dir="." prefix="xstream-${version}">
                <include name="build.xml"/>
                <include name="LICENSE.txt"/>
                <include name="README.txt"/>
                <include name="src/**"/>
                <include name="lib/**"/>
            </zipfileset>
            <zipfileset dir="build" prefix="xstream-${version}">
                <include name="xstream-${version}*.jar"/>
            </zipfileset>
            <zipfileset dir="build/website" prefix="xstream-${version}/docs"/>
        </zip>
    </target>

</project>
